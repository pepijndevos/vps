---
- name: Setup Nginx with Certbot and Virtual Hosts
  hosts: webservers
  become: yes
  vars:
    # Configuration variables
    nginx_user: www-data
    certbot_email: me@pepijndevos.nl
    
    # Define your virtual hosts here
    virtual_hosts:
      - domain: pkg.sanctuary-systems.com
        document_root: /var/www/pkg.sanctuary-systems.com
        aliases: []
      - domain: nyancad.com
        document_root: /var/www/nyancad.com
        aliases: ["www.nyancad.com"]
      - domain: api.nyancad.com
        document_root: /var/www/api.nyancad.com
        aliases: []
        proxy_pass: "http://localhost:5984"  # CouchDB default port
    
    # CouchDB configuration
    couchdb_admin_user: admin
    couchdb_admin_password: "{{ vault_couchdb_password | default('changeme123!') }}"
    couchdb_bind_address: "127.0.0.1"
    couchdb_port: 5984
    
    # GitHub Actions Runner configuration
    github_runner_version: "2.324.0"
    github_repo_url: "https://github.com/sanctuary-systems-com/llm-addons"
    github_runner_token: "{{ vault_github_runner_token }}"
    github_runner_name: "{{ ansible_hostname }}-runner"
    
  tasks:
    - name: Update package cache
      apt:
        update_cache: yes
        cache_valid_time: 3600
      when: ansible_os_family == "Debian"

    - name: Install required packages
      package:
        name:
          - nginx
          - software-properties-common
          - python3-certbot-nginx
          - ufw
          - debconf-utils
          - unattended-upgrades
        state: present

    - name: Create web directories for virtual hosts
      file:
        path: "{{ item.document_root }}"
        state: directory
        owner: "{{ nginx_user }}"
        group: "{{ nginx_user }}"
        mode: '0755'
      loop: "{{ virtual_hosts }}"

    - name: Create index.html files for each virtual host
      template:
        src: index.html.j2
        dest: "{{ item.document_root }}/index.html"
        owner: "{{ nginx_user }}"
        group: "{{ nginx_user }}"
        mode: '0644'
      loop: "{{ virtual_hosts }}"

    - name: Remove default nginx site
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent
      notify: restart nginx

    - name: Create nginx virtual host configurations (HTTP only initially)
      template:
        src: vhost.conf.j2
        dest: "/etc/nginx/sites-available/{{ item.domain }}"
      loop: "{{ virtual_hosts }}"
      notify: restart nginx

    - name: Enable virtual host sites
      file:
        src: "/etc/nginx/sites-available/{{ item.domain }}"
        dest: "/etc/nginx/sites-enabled/{{ item.domain }}"
        state: link
      loop: "{{ virtual_hosts }}"
      notify: restart nginx

    - name: Test nginx configuration
      command: nginx -t
      register: nginx_test
      changed_when: false

    - name: Start and enable nginx
      systemd:
        name: nginx
        state: started
        enabled: yes

    - name: Configure UFW firewall
      ufw:
        rule: allow
        port: "{{ item }}"
      loop:
        - "22"    # SSH
        - "80"    # HTTP
        - "443"   # HTTPS

    - name: Enable UFW firewall
      ufw:
        state: enabled
        policy: deny

    # CouchDB Installation and Configuration
    - name: Create keyring directory
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Add CouchDB repository key
      get_url:
        url: https://couchdb.apache.org/repo/keys.asc
        dest: /etc/apt/keyrings/couchdb-archive-keyring.asc
        mode: '0644'

    - name: Add CouchDB repository
      apt_repository:
        repo: "deb [signed-by=/etc/apt/keyrings/couchdb-archive-keyring.asc] https://apache.jfrog.io/artifactory/couchdb-deb/ {{ ansible_distribution_release }} main"
        state: present

    - name: Update package cache after adding CouchDB repo
      apt:
        update_cache: yes

    - name: Pre-configure CouchDB installation (debconf)
      debconf:
        name: couchdb
        question: "{{ item.question }}"
        value: "{{ item.value }}"
        vtype: "{{ item.vtype }}"
      loop:
        - { question: "couchdb/mode", value: "standalone", vtype: "select" }
        - { question: "couchdb/bindaddress", value: "{{ couchdb_bind_address }}", vtype: "string" }
        - { question: "couchdb/cookie", value: "chocolate", vtype: "string" }
        - { question: "couchdb/adminpass", value: "{{ couchdb_admin_password }}", vtype: "password" }
        - { question: "couchdb/adminpass_again", value: "{{ couchdb_admin_password }}", vtype: "password" }

    - name: Install CouchDB with pre-configured settings
      apt:
        name: couchdb
        state: present
      environment:
        DEBIAN_FRONTEND: noninteractive

    - name: Configure CouchDB CORS and per-user settings
      template:
        src: couchdb-local.ini.j2
        dest: /opt/couchdb/etc/local.d/local.ini
        owner: couchdb
        group: couchdb
        mode: '0644'
        backup: yes
      notify: restart couchdb

    - name: Start and enable CouchDB
      systemd:
        name: couchdb
        state: started
        enabled: yes

    # GitHub Actions Runner Setup
    - name: Create github-runner user
      user:
        name: github-runner
        system: yes
        shell: /bin/bash
        home: /home/github-runner
        create_home: yes

    - name: Detect system architecture
      set_fact:
        runner_arch: "{{ 'arm64' if ansible_architecture == 'aarch64' else 'x64' }}"

    - name: Create actions-runner directory
      file:
        path: /home/github-runner/actions-runner
        state: directory
        owner: github-runner
        group: github-runner
        mode: '0755'

    - name: Download GitHub Actions runner
      get_url:
        url: "https://github.com/actions/runner/releases/download/v{{ github_runner_version }}/actions-runner-linux-{{ runner_arch }}-{{ github_runner_version }}.tar.gz"
        dest: "/home/github-runner/actions-runner-linux-{{ runner_arch }}-{{ github_runner_version }}.tar.gz"
        owner: github-runner
        group: github-runner
        mode: '0644'

    - name: Extract GitHub Actions runner
      unarchive:
        src: "/home/github-runner/actions-runner-linux-{{ runner_arch }}-{{ github_runner_version }}.tar.gz"
        dest: /home/github-runner/actions-runner
        owner: github-runner
        group: github-runner
        remote_src: yes
        creates: /home/github-runner/actions-runner/config.sh

    - name: Check if runner is already configured
      stat:
        path: /home/github-runner/actions-runner/.runner
      register: runner_configured

    - name: Configure GitHub Actions runner
      command: >
        ./config.sh --url {{ github_repo_url }} 
        --token {{ github_runner_token }} 
        --name {{ github_runner_name }}
        --work _work 
        --unattended
      args:
        chdir: /home/github-runner/actions-runner
      become_user: github-runner
      when: not runner_configured.stat.exists

    - name: Install GitHub Actions runner as service
      command: ./svc.sh install
      args:
        chdir: /home/github-runner/actions-runner
      when: not runner_configured.stat.exists

    - name: Start and enable GitHub Actions runner service
      systemd:
        name: actions.runner.sanctuary-systems-com-llm-addons.{{ github_runner_name }}.service
        state: started
        enabled: yes

    # Enable automatic security updates
    - name: Start and enable unattended-upgrades
      systemd:
        name: unattended-upgrades
        state: started
        enabled: yes

    - name: Obtain SSL certificates with certbot
      command: >
        certbot --nginx 
        --email {{ certbot_email }} 
        --agree-tos 
        --non-interactive 
        --domains {{ item.domain }}{% if item.aliases %},{{ item.aliases | join(',') }}{% endif %}
      loop: "{{ virtual_hosts }}"
      register: certbot_result
      failed_when: certbot_result.rc != 0 and "Certificate not yet due for renewal" not in certbot_result.stdout
      changed_when: "'Congratulations!' in certbot_result.stdout"

    - name: Setup certbot auto-renewal cron job
      cron:
        name: "Certbot auto renewal"
        minute: "0"
        hour: "12"
        job: "/usr/bin/certbot renew --quiet --post-hook 'systemctl reload nginx'"
        user: root

    - name: Ensure nginx is restarted after SSL setup
      systemd:
        name: nginx
        state: restarted

  handlers:
    - name: restart nginx
      systemd:
        name: nginx
        state: restarted

    - name: restart couchdb
      systemd:
        name: couchdb
        state: restarted